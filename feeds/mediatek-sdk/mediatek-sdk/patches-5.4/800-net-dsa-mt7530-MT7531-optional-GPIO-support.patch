From 2f51395434e4eb85a55797c22f63516e28a37eed Mon Sep 17 00:00:00 2001
From: Brett Mastbergen <brettm@minim.com>
Date: Tue, 15 Nov 2022 11:46:12 -0500
Subject: [PATCH] net: dsa: mt7530: MT7531 optional GPIO support

MT7351's LED controller can drive up to 8 LED/GPIOs.

Add support for GPIO control and allow users to use its GPIOs by
setting gpio-controller property in device tree

Signed-off-by: Brett Mastbergen <brettm@minim.com>
---
 drivers/net/dsa/mt7530.c | 142 +++++++++++++++++++++++++++++++++++++++
 drivers/net/dsa/mt7530.h |  23 +++++++
 2 files changed, 165 insertions(+)

diff --git a/drivers/net/dsa/mt7530.c b/drivers/net/dsa/mt7530.c
index 85d4711e9ba5..c7f682adb1da 100644
--- a/drivers/net/dsa/mt7530.c
+++ b/drivers/net/dsa/mt7530.c
@@ -18,6 +18,7 @@
 #include <linux/regulator/consumer.h>
 #include <linux/reset.h>
 #include <linux/gpio/consumer.h>
+#include <linux/gpio/driver.h>
 #include <net/dsa.h>
 
 #include "mt7530.h"
@@ -1723,6 +1724,141 @@ setup_unused_ports(struct dsa_switch *ds, u32 pm)
 	return 0;
 }
 
+static inline u32
+mt7531_gpio_to_bit(unsigned int offset)
+{
+	switch(offset) {
+		default:
+		case 0:
+			/* LAN0 LED0 */
+			return BIT(24);
+		case 1:
+			/* LAN0 LED1 */
+			return BIT(23);
+		case 2:
+			/* LAN1 LED0 */
+			return BIT(22);
+		case 3:
+			/* LAN1 LED1 */
+			return BIT(21);
+		case 4:
+			/* LAN2 LED0 */
+			return BIT(18);
+		case 5:
+			/* LAN2 LED1 */
+			return BIT(20);
+		case 6:
+			/* LAN3 LED0 */
+			return BIT(17);
+		case 7:
+			/* LAN3 LED1 */
+			return BIT(15);
+		case 8:
+			/* LAN4 LED0 */
+			return BIT(13);
+		case 9:
+			/* LAN4 LED1 */
+			return BIT(14);
+	}
+}
+
+static int
+mt7531_gpio_get(struct gpio_chip *gc, unsigned int offset)
+{
+	struct mt7530_priv *priv = gpiochip_get_data(gc);
+	u32 bit = mt7531_gpio_to_bit(offset);
+
+	return !!(mt7530_read(priv, MT7531_LED_GPIO_DIN1) & bit);
+}
+
+static void
+mt7531_gpio_set(struct gpio_chip *gc, unsigned int offset, int value)
+{
+	struct mt7530_priv *priv = gpiochip_get_data(gc);
+	u32 bit = mt7531_gpio_to_bit(offset);
+
+	if (value)
+		mt7530_set(priv, MT7531_LED_GPIO_DOUT1, bit);
+	else
+		mt7530_clear(priv, MT7531_LED_GPIO_DOUT1, bit);
+}
+
+static int
+mt7531_gpio_get_direction(struct gpio_chip *gc, unsigned int offset)
+{
+	struct mt7530_priv *priv = gpiochip_get_data(gc);
+	u32 bit = mt7531_gpio_to_bit(offset);
+
+	return (mt7530_read(priv, MT7531_LED_GPIO_DIR1) & bit) ?
+		0 : 1;
+}
+
+static int
+mt7531_gpio_direction_input(struct gpio_chip *gc, unsigned int offset)
+{
+	struct mt7530_priv *priv = gpiochip_get_data(gc);
+	u32 bit = mt7531_gpio_to_bit(offset);
+
+	mt7530_clear(priv, MT7531_LED_GPIO_DIR1, bit);
+
+	return 0;
+}
+
+static int
+mt7531_gpio_direction_output(struct gpio_chip *gc, unsigned int offset, int value)
+{
+	struct mt7530_priv *priv = gpiochip_get_data(gc);
+	u32 bit = mt7531_gpio_to_bit(offset);
+
+	if (value)
+		mt7530_set(priv, MT7531_LED_GPIO_DOUT1, bit);
+	else
+		mt7530_clear(priv, MT7531_LED_GPIO_DOUT1, bit);
+
+	mt7530_set(priv, MT7531_LED_GPIO_DIR1, bit);
+
+	return 0;
+}
+
+static int
+mt7531_setup_gpio(struct mt7530_priv *priv)
+{
+	struct device *dev = priv->dev;
+	struct gpio_chip *gc;
+
+	gc = devm_kzalloc(dev, sizeof(*gc), GFP_KERNEL);
+	if (!gc)
+		return -ENOMEM;
+
+	mt7530_clear(priv, MT7531_GPIO_MODE1, MT7531_GPIO13_LAN4_LED0_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE1, MT7531_GPIO14_LAN4_LED1_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE1, MT7531_GPIO15_LAN3_LED1_MASK);
+
+	mt7530_clear(priv, MT7531_GPIO_MODE2, MT7531_GPIO17_LAN3_LED0_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE2, MT7531_GPIO18_LAN2_LED0_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE2, MT7531_GPIO20_LAN2_LED1_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE2, MT7531_GPIO21_LAN1_LED1_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE2, MT7531_GPIO22_LAN1_LED0_MASK);
+	mt7530_clear(priv, MT7531_GPIO_MODE2, MT7531_GPIO23_LAN0_LED1_MASK);
+
+	mt7530_clear(priv, MT7531_GPIO_MODE3, MT7531_GPIO24_LAN0_LED0_MASK);
+
+	gc->label = "mt7531";
+	gc->parent = dev;
+	gc->owner = THIS_MODULE;
+	gc->get_direction = mt7531_gpio_get_direction;
+	gc->direction_input = mt7531_gpio_direction_input;
+	gc->direction_output = mt7531_gpio_direction_output;
+	gc->get = mt7531_gpio_get;
+	gc->set = mt7531_gpio_set;
+	gc->base = -1;
+	gc->ngpio = 10;
+	gc->can_sleep = true;
+
+	return devm_gpiochip_add_data(dev, gc, priv);
+}
+
+
 static int
 mt7531_setup(struct dsa_switch *ds)
 {
@@ -1840,6 +1976,12 @@ mt7531_setup(struct dsa_switch *ds)
 	if (ret < 0)
 		return ret;
 
+	if (of_property_read_bool(priv->dev->of_node, "gpio-controller")) {
+		ret = mt7531_setup_gpio(priv);
+		if (ret)
+			return ret;
+	}
+
 	return 0;
 }
 
diff --git a/drivers/net/dsa/mt7530.h b/drivers/net/dsa/mt7530.h
index 8f1e827ff5fe..d3e5afb226c5 100644
--- a/drivers/net/dsa/mt7530.h
+++ b/drivers/net/dsa/mt7530.h
@@ -527,6 +527,15 @@ enum mt7531_clk_skew {
 #define MT7530_P5RGMIITXCR		0x7b04
 #define  CSR_RGMII_TXC_CFG(x)		((x) & 0x1f)
 
+/* MT7531 GPIO Direction Control */
+#define MT7531_LED_GPIO_DIR1		0x7c00
+
+/* MT7531 GPIO Data Output */
+#define MT7531_LED_GPIO_DOUT1		0x7c04
+
+/* MT7531 GPIO Data Input */
+#define MT7531_LED_GPIO_DIN1		0x7c08
+
 /* Registers for GPIO mode */
 #define MT7531_GPIO_MODE0		0x7c0c
 #define  MT7531_GPIO0_MASK		GENMASK(3, 0)
@@ -537,6 +546,20 @@ enum mt7531_clk_skew {
 #define  MT7531_EXT_P_MDC_11		(2 << 12)
 #define  MT7531_GPIO12_RG_RXD3_MASK	GENMASK(19, 16)
 #define  MT7531_EXT_P_MDIO_12		(2 << 16)
+#define  MT7531_GPIO13_LAN4_LED0_MASK	GENMASK(23, 20)
+#define  MT7531_GPIO14_LAN4_LED1_MASK	GENMASK(27, 24)
+#define  MT7531_GPIO15_LAN3_LED1_MASK	GENMASK(31, 28)
+
+#define MT7531_GPIO_MODE2		0x7c14
+#define  MT7531_GPIO17_LAN3_LED0_MASK	GENMASK(7, 4)
+#define  MT7531_GPIO18_LAN2_LED0_MASK	GENMASK(11, 8)
+#define  MT7531_GPIO20_LAN2_LED1_MASK	GENMASK(19, 16)
+#define  MT7531_GPIO21_LAN1_LED1_MASK	GENMASK(23, 20)
+#define  MT7531_GPIO22_LAN1_LED0_MASK	GENMASK(27, 24)
+#define  MT7531_GPIO23_LAN0_LED1_MASK	GENMASK(31, 28)
+
+#define MT7531_GPIO_MODE3		0x7c18
+#define  MT7531_GPIO24_LAN0_LED0_MASK	GENMASK(3, 0)
 
 #define MT7530_CREV			0x7ffc
 #define  CHIP_NAME_SHIFT		16
-- 
2.30.2

